Инициализация полей.

Инициализаторы полей - это выражения которые позволяют задать начальные значения полям объектов.
Если полю не присвоенно никакое значение, тогда полю присваивается нулевое значение или null если это поле ссылочного типа данных. (адресс по которому ходить нельзя). 

Инициализация необходима для того чтобы внутри метода мы обращались именно к полю. 
Указав

Инициализаторы полей(или поля указанные вначале внутри класса) - это выражения, позволяющие задать начальные значения полям
создаваемых объектов:

public class Cinditioner {
private int id;
private String name = "name";
private int maxTemperature = 30 ;
... и тд.
}

Если нас устраивают нулевые значения поля , то мы можем оставить их не заполненными.

Если в тестах мы часто используем один и тот же объект то мы можем вынести его в поле перед началом тестов.
В итоге при вызове каждого нового теста Java будет создавать заново целиком отдельный объект нашего класса теста
и будет инициализировать его поля. 

Conditioner cond = new Conditioner():

@Test
.....


Правильней и лучше всего присваивать значений перменным а не указывать их прямо в условии в виде чсиел
Например: лучше завести перемнную которая будет хранить значение максимальной и минимальной температуры и вместо того чтобы указывать цифры
внутри условий, мы будем обращаться внутри класса к переменным которые будут хранить эти значения.

private maxTemperature = 30; 
private minTemperature = 10;
currentTemperature = minTemperature;

public void SetCurrentTemperature (int newCurrentTemperature) {
if (newCurrentTemperature < minTemperature(вместо 0)) {
return;
if (newCurrentTemperature > maxTemperature(вместо 30)) {
return;
}
currentTemperature = newCurrentTemperature;
}


Конструктор

выглядит он следующим образом напримере внутри класса Conditioner

public Conditioner () {

}

название совпадает с названием класса 
Внутри конструкторов автор указывает дополнительные действия которое очень пригодились бы для инициализации(создания,подготовки к работе) объекта. 
Напримере Conditioner добавим в конструктор функцию с помощью которой можно устанавливать самостоятельно значения температур, сделав тем самым конструктор параметризированным :

public Conditioner (int minTemperature, int maxTemperature) {

}

чтобы задать значение параметров в конструкторе, нужно ссылаться на поле , с помощью this.(и (ссылкой)названия поля которое мы хотим использовать):

private maxTemperature = 30; 
private minTemperature = 10;
currentTemperature = minTemperature;

public Conditioner (int minTemperature, int maxTemperature) {
this.minTemperature (имеем ввиду поле) = minTemperature (имеем ввиду параметр конструктора)
this.maxTemperature (имеем ввиду поле) = minTemperature (имеем ввиду параметр конструктора)
}
Мы не можем создавать внутри класса несклько конструкторов с одинаковыми входными данными , даже если названия уних будут разные.
Так мы можем создать только один конструктор который будет принимать один параметр типа данных int , или один параметр типа данных String 
Если созданны конструкторы с одинковыми входными параметрами ,тогда возникнут разногласия и непонимания внутри системе.
Класс не обязан иметь единственный конструктор.

Использование разных версий конструкторов со своими параметрами отличающимися друг от друга называется Перегрузкой Конструкторов.


