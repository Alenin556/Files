Работа с локальным репозиторием .

Репозиторий - это хранилище истории и данных (файлов) проекта.

Репозиторий создается внутри папки с помощью вызова консоли Git Bash , и с вводом в консоль команды git init.
Добавление файлов в репозиторий совершается с помощью команды git add и названием файла с указанием типа этого
файла , например(index.html) 
итог: git add index.html 
Теперь этот файл будет отслеживаться программой. Делая файл отслеживаемым мы тем самым следим за тем какие файлы мы создали
,испраивли для того чтобы затем добавить их в наш проект с помощью коммита т.е. команды git commit.

Так же для определения статуса нашего репозитория , т.е.для просмотра всех файлов котороые мы  добавили а какие нет мы используем команду 
git status .
Если у нас есть такие файлы которые мы случайно не добавили , при вызове команды git status они будут подчеркнуты красным цветом .
Зеленым цветом будут подчеркнуты те файлы которые в данный момент уже отслеживаются.
Файлы можно добавлять не по одному , с помощью команды
git add * (внимание важен пробел)пш
с использованием * мы добавим все файлы которые мы создали ,внутри той папки в которой находится наш репозиторий.
Или же мы можем использовать команду
add *.js 
с расширением через точку , то есть мы добавим все файлы того типа которого укажем.

Для фиксации изменений используется команда git commit с дальнейшим указанием комментария к изменению (это нужно для того чтобы по комментариям можно было определить определенную версию в которую внесли изменения).
Делая коммит мы тем самым сохраняем изменения в нашем проекте и все те файлы которые мы добавили и внесли в них изменения ,становятся частью нашего текущего проекта.


Навигация по интерфейсу внутри Git ^X - означает что дял использования команды необходимо сочетание клавиши Cntrl и X

Мы можем заменить 2 действия добавления и коммита с указание комментария на одно , командой :
git commit -a -m "С указанием комментаряи к коммиту"

указывая -а(all) мы имеем ввиду что мы добавляем все измененные файлы(но не новые ,новые нужно добавлять отдельно через git add)
указывая -m(messege) мы напрямую указываем комментарий к коммиту 

После того как мы сделали ряд коммитов , мы можем просмтреть историю этих коммитов с помощью команды :
git log 
после вызова этой команды мы можем видеть какой комит его номер или индентификатор, кем и в какое время был создан, с их комментариями.

Индентификатор позволяет посмотреть все изменения которые были произведены в рамках коммита
При помощи комнды 
git show и первых символов 
Мы можем увидеть всю историю изменений в рамках коммита , увидеть краткую информацию , и подробную т.е. что именно было измененно. Изменения будуь подчеркнуты зеленым цветом.


Для того чтобы удалить случайно добавленные файлы до коммита* используем команду
git rm (remove) --cached и название того файла которого мы хотим удалить с указанием его типа например : tmp/tmp.txt
итого : 
git rm --cached tmp/tmp.txt
После удаления лучше всего перепроверить какие файлы у насотслеживаются а какие нет командой git status.

Также если мы добавили не только один файл а всю папку полностью до коммита* то для удаления папки целиком используем команду :
git rm --cached -r и название папки например :tmp
для удаления папок исплоьзуем -r
итого :
git rm --cached -r tmp

(При этом файл или папка не удаляются с носителя, а удаляются из отслеживания gitом)
(Мы не теряем их полностью Git файл по прежнему видит но не отслеживает поэтому при вызове команды git status будет подчеркнута красным цветом)
*(для добавление исп комнаду git add)
(после добавления файла назад коммит будет прежним)

После коммита если добавлен какой то файл мы так же можем его удалить с помощью тех же самых команд:
git rm --cached (для файлов)
git rm --cached -r (для папко)
только после этого сделав коммит для сохранения изменений.

Для того чтобы добавить какой то файл в предыдущий коммит используем команду :
git add с добавлением файла
затем
git commit --amend -m "Комментарий"
предыдущий коммит будет переписан с новыми файлами которые мы добавили в новом коммите.И указанием нового коментария вместо старого.
Проверить это можно командой git log , при этом индентификатор коммита будет заменен на новый

Для отмены всех изменний которые мы внесли необходимо использовать команду и индентификатор коммита 
git revert (первые значения индентификатора) git log
Проверив командой git log чтобы увидеть историю коммитов, мы должны увидеть все коммиты , те коммиты которые были отменены будут с подписью Revert .

Для того чтобы игнорировать и не отслеживать какие то файлы которые нам совсем не нужны в проекте но они существуют внутри проекта в репозитории мы используем
.gitignore это специальный текстовый файл , который создаем мы сами ,в котором мы в столбик указываем файлы или папки которые нас не интересуют.
Например : 
если в текстовом файле .gitignore указан *.txt - то будут игнорироваться все фалй с типом данных txt
если в текстовом файле .gitignore указан Thumbs.db - то будут игнорироваться все файл Thumbs.db
если в текстовом файле .gitignore указан tmp/ - то будет игнорироваться вся папка tmp и все что в ней лежит
* Сам файл .gitignore мы так же добавляем в проект (коммитим чтобы зафиксировать этот файл за проектом) так как в нем содержиться часть нашего проекта (но лежит в нем то что нас не интересует).
* Файл .gitignore лучше добавлять перед первым коммитом , для того чтобы не забыть первым делом проигнорировать не нужные папки и файлы.

Для того чтобы скопировать удаленный репозиторий и забрать всю информацию ,нам необходимо создать пустую папки в ней открыть Git Bash ,затем ввести команду :
git clone и указать URl копируемого репозитория.
После клонирования репозитория , Git создаст папу с именем репозиторяи которого мы создали , для перехода внутрь папки используем команду:
cd название папки например:
cd demo 
Теперь мы находимся внутри папки в которой находится репозиторий , куда мы можем добавлять и сохранять файлы для проекта.
проверить это мы можем при помощи вызова git status

Для того чтобы увидеть какие удаленные репозитории привязаный к локальному необходимо ввести команду : 
git remote -v
и дальше будут отображеный URl адресса привязаных удаленных репозиториев

Для отправки изменений используем команду :
В первый раз при отправке  
git push -u origin master(main)
где origin это то куда мы отправляем то есть наш удаленный репозиторий проверить это можно командой git remote
а master или main это наша основная локальная ветка.
После вызова команды необходимо ввести логин и пароль
В следующие разы после коммитов при отправке файлов можно указывать только 
git push 
так как у нас уже установленна связь с удаленным репозиторием , (логин и пароль вводим так же как и в первый раз). 

Для того чтобы привязаться к удаленному репозиторию имея только локальный , используем команду :
git remote add origin и URl удаленного репозитория
origin - это имя удаленного репозитория (так принято по умолчанию называть первый добавлемый удаленные репозитории)
При клонировании и просмотре привязанных репозиториев мы использовали похожую команду git remote -v 
А теперь мы добавляем репозиторий, и так же проверяем добавился ли удаленный репозиторий командой git remote -v.

Когда у нас есть локальный и удаленный репозиторий и мы хотим извлеч из удаленного репозитория файлы и обновить локальный используется команда 
git pull с названием удаленного репозитория это origin и указания master ветки в данный момент куда сохраняется проект.
итог : 
git pull origin master 
Команда git pull используется для извлечения и загрузки содержимого из удаленного репозитория и немедленного обновления локального репозитория этим содержимым. 
При этом эта команда не может заменить нам команду git clone , так как она обновляет* репозиторий, и служит для того чтобы при работе над одним проектом мы могли внести изменния в свой локальный репозиторий обновив его.
Команда же git clone необходима для создания репозитория на основе удаленного а не для его обновления .


Ветки (branches).

Ветки и ветвление используется для паралельной разработки разных функций в рамках одного проекта.
Ветка в которой ведётся вся работа изначально называется master по умолчанию или main
командой 
git branch имя например feature/payment
git branch feature/payment
мы создаем новую ветку и даем ей имя 
При создании ветки мы не пререключаемся на нее автоматически , а остаемся в ветке в которой мы начали создавать доп ветку.

Указывая команду
 
git branch 

без указывания имени мы происм Git показать нам все существующие ветки проекта.Зеленым будет выделена та ветка в которой мы сейчас находимся(так же она будет отмечена звездочкой *).

Для переключения между ветками используется команда 
git checkout и название ветки

git checkout feature/payment

для создания и переключения в ветку можно использовать 
git checkout -b и имя ветки
git checkout -b feature/payment

В строке консоли мы должны видеть изменение о смене ветки.
*До первых коммитов необходимо завести папку .gitignore если она необходима.
Производя все изменения в новых ветках мы делаем все тоже самое что и в основной,при изменениях сохраняем и добавляем новые файлы в отслеживание git add* и сохраняем эти изменения то есть делаем коммиты git commit.

Для того чтобы удаленный репозиторий отслеживал ветки которые мы хотим чтобы он видел, нужно указать при отправке изменений ветку которую мы хотим привязать дополнительно к удаленному репозиторию 
git push -u origin и название ветки которую мы хотим отслеживать удаленно feature/payment

git push -u origin feature/payment

Слияние веток.Merge

Для того, чтобы слить воедино в одну ветку изменения которые были сделаны в других ветках необходимо воспользоваться командой 
git merge --no-ff указываем ветку которую мы хотим слить feature/payment

git merge --no-ff feature/payment

--no-ff - специальный флаг указав который автоматически создается коммит в ветке с заполненным комментарием
делаем это все в ветке master , main (т.е. главной ветке)
Для дальнейшего фиксирования изменений отправляем изменения на GitHub делаем push.

Чтобы вызвать схему коммитов , для наглядного изображения какие коммиты были сделаны и в каких ветках , используем комманду
git log --oneline --graph

После слития так же необходимо сделать push, чтобы синхронизировать коммиты удаленного и локального репозитория.
*(origin - удаленный 
*(master,main) - локальный

Для того чтобы увидеть историю коммитов опредленной ветки необходимо указать команду 
git log --oneline --graph и имя ветки 
git log --oneline --graphfeature/payment 
после чего увидим всю историю коммитов данной ветки

Удаление веток.

Мы можем удалить ветку с помощью команды 
git branch -d и имя ветки
-d - специальный флаг для удаления
git branch -d feature/payment
Главное чтобы удаляемая ветка не была в текущей в момент удаления.

для удаления ветки которая хранится в репозитории на GitHub используем 
git push --delete origin feature/payment

Тэги.

Для отметки определленого выпуска версии или для отметки и выделения коммита в истори мы можем использовать тэги, чтобы не запоминать номера индентификаторов коммита.