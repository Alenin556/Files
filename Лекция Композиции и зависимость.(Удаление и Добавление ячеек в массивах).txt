Лекция Композиция и зависимость.

Добавление новой ячейки в массив.

Для того чтобы добавить новую ячейку в массив , необходимо создать новый массив только на одну ячейку больше , затем скопировть все содержимое старого массива и оставить одну ячейку незаполненной ,
куда мы заполним то что хотим добавить.

Так у нас есть массив 
String[] names = {
   "Petya",
   "Anya",
   "Olya",
   "Kolya"
};

[] эти скобки обозначают массив 
String[] - обозначает что у нас строчный массив , массив которой может содержать только строчные данные

String newName = "Slava";
- переменная в которой лежит имя которе мы хотим добавить

String[] tmp = new String[];
- создаем массив который всегда будет на единицу больше чем массив names , указав в скобках что этот массив добавляет +1 ячейку к длине массива names 
names.lenght +1
*(мы могли бы указать определенное количество в скобках , но это было бы не универсально)
итого 
String[] tmp = new String[names.length + 1];

Для копирования ячеек,переберем их каждую,и используем команду
for ((от нулевой ячейки);(до конца всего массива);(с каждым шагом))
for (int i = 0; i < names.length; i++)
затем мы создаем тело этого цикла которое будет выполняться для каждой строчки
{
и просим переместить в ячейку tmp ячейку names 
tmp[i] = names[i];(Перемещаем по номерам строки из names в новые ячейки для строк в массив tmp)
i - здесь указано как номер ячейки (или строки) 
В итоге мы получим массив который будет содержать все строки которые были указаны в массиве names с еще одной незаполенной ячейкой.
}
Для добавления в последнюю ячеку мы должны указать путь к ней, т.е. не указать просто номер ячейки а вычесть из всей длины массива одну ячейку -1 это и будет последняя ячейка
куда мы положим наше новое имя 
tmp[tmp.lenght -1] = newName;
Для того чтобы изменить массив names тем самым сделав так как будто мы выполнинили добавление мы приравниваем массив names к tmp 
итого
names = tmp;

String[] tmp = new String[names.length + 1];
for (int i = 0; i < names.length; i++){
tmp[i] = names[i];
}
tmp[tmp.length -1] = newName;
names = tmp;

Удаление ячеек из массива.

String[] names = {
   "Petya",
   "Anya",
   "Olya",
   "Kolya",
   "Slava"
};

Для удаления ячейки из массива необходимо выполнить похожую по аналогии операцию создав массив на одну ячейку меньше -1

Так же создаем переменную для хранения имени которое мы хотим удалить
String removeName = "Slava";

Создаем массив который *всегда будет на одну ячейку меньше
String[] tmp = new String[names.length - 1];

Теперь мы сделаем так что мы переложим все строчки перебором, кроме той котороую хотим удалить
при этом при удалении индексы старого и нового массива разойдуться , так как в старом массиве последний элемент имеет индекс 4 а в новом будет равен 3 
поэтому необходимо завести переменную с номером индекса куда мы будем сохранять строки.
int copyToIndex = 0;
переменная равна нулю и с каждым шагом будет указывать номер индекса в который мы копируем строки.

затем мы можем так же системой перебора перебрать все индексы старого массива в новый 
for (int i = 0; i < names.length; i++){
и тело которое мы укажем будем выполнятся для каждой ячейки

но так же можем воспользоваться командой 
for (String name : names) , 
то есть foreach - это разновидность цикла for, которая используется, когда нужно обработать все элементы массива или коллекции.
“For each” с английского так и переводится - для каждого.
где String name тип элемента с его наименованием которое мы даем сами, names это массив.

Дальше мы сравниваем строки массива с тем какие строки мы хотим добавить а какие нет.
equals - используется для сравнения ссылочных типов данных (рнаш массив имеет набор из ссылочных типов данных).
if (name.equals(removeName)){
если имя равно имени которые мы хотим удалить то мы ничего не делаем и не копируем его в новый массив (поле не заполняется)
}else {если же не равно то мы хотим его скопировать
}

так получается что случай по ветке if оказывается пустым, а случай ветки else заполненный , так код выглядить не должен 
тогда когда заполенный явлется else необходимо перевернуть условие и указать обратное
если имя не равно !name.equalse имени которое мы хотим удалить (removeName) 
if (name.equals(removeName)){
мы его копируем
}else{ иначе мы ничего не делаем и ветка else при этом может быть пустой.}

Как мы будем копировать
мы хотим сдлеать так чтобы перменная copyToIndex хранила номер ячейки куда мы копируем строки
и мы указываем что массив 
tmp[будет хранить строки которые мы копируем]
tmp[copyToIndex] = name;
где name это название типа данных которые мы перебираем циклом for (String name : names)

после копирования нам необходимо сделать шаг и указать новое место для переменной copyToIndex
copyToIndex++;
если не сделаем шаг то копирование будет в одну и ту же ячейку массива.

Итог:
for (String name : names) {
if (!name.equals(removeName)){
tmp[copyToIndex] = name;
copyToIndex++;
 }
}
names = tmp;(так же присваиваем массиву изменненое состояние).
Так мы переберем все имена массива, кроме имени которое хотим удалить




