Лекция - Инкапсуляция.

В лекции мы разбираем работу объекта Cinditioner . Когда мы хотим установить значение максимальной температуры мы обращались к полю cond.currentTemperature ,
где мы задавали напрямую значение температуры.

Но напрямую обращаться к полям неправильно .Если мы хотим получить от объекта какие то данные или изменить их то мы это делаем через методы.
Поэтому внутри класса необходимо иметь методы через которые мы можем обращаться к этим полям в других классах.
Автор класса должен предусмотреть возможность взаимодействия с его данными через методы а не напрямую через поля. (в лекции это поле currentTemperature).

Затем мы создаем два метода : для получения данных от поля внутри класса , и метод для установки значения в поле внутри класса ( get(название того значения которое мы хотим получить)
метод и set(название того значения которое мы хотим установить) метод).(* Еще эти методы называют геттеры и сеттеры так как они часто используются).

Метод get :
public int getНазвание() {
return currentTemperature
}
public int - потому что он должен отдавать данные при его вызове 
() - внутри скобок мы ничего не указываем так как мы хотим получить информацию от метода .Вся нужная нам информация уже должна быт ьвнутри. Никаких входнных данных
мы не должны устанавливать. 
Метод открывают фигурные скобки  {} внутри них мы указываем то что мы хотим получить в ответ на вызов это :return currentTemperature.(мы возвращаем то значение которое 
лежит в поле).

Метод set :
piblic void setНазвание(int newCurrentTemperature) {
currentTemperature = newCurrentTemparature
}
public void - потому что когда мы хотим установить значение , в ответ ничего не должно приходить , значение просто изменяется.
(int newCurrentTemperature) - в круглых скобках мы должны установить пармметры нашего метода , то что мы даем методу на вход, значение которое хотим установить сами.(По логике работы с кондиционером ,
для установки температуры мы должны дать данные кондиционеру чтобы он их принял и изменил, он не сможет изменить свою температуру без этой информации).
currentTemperature = newCurrentTemparature - внутри круглых скобок мы указываем то что мы хотим иметь , то есть новую температуру,
поле с текущей температурой теперь будет хранить значение которое мы указали в парматерах к методу . И при вызове этого метода число в поле currentTemperature будет меняться.

Для установок границ работы Conditioner мы добавим новый метод который будет содержать строки : 
piblic void setНазвание(int newCurrentTemperature) {
if (newCurrentTemperature < 0) {
return;
}
if (newCurrentTemperature > 30) {
return;
}
currentTemperature = newCurrentTemparature
}

Эти строчки дают нам то что если число меньше 0 или больше то метод не будет исполнен ,!и присвоение полю currentTemperature = newCurrentTemperature не сработает!.
Метод будет устнавливать значения только в тех рамках которые мы ему установили.

if (newCurrentTemperature < 0) {
return;
}
if (newCurrentTemperature > 30) {
return;
}

Такая защита данных когда мы запрещаем напрямую их менять и изменяем все обращение к данным на методы называется *Инкапсуляцией*.(мы как будто помещаем поле в капсулу и защищаем их методами).

Java так же имеет механизмы с помощью  которых можно физически запретить обращатсья к нашим полям , эти механизмы называются уровнями доступа или статусами.
Один из них это public свой по сути модификатор доступа. Это определенный уровень доступа члена класса.

перменная без этого УД (уровня доступа) например : 
int currentTemperature 
означает что обратиться к этому полю может сам класс и все классы которые находяться в одном пакете. Такой уровень доступа называется *пакетно-приватным потому что он запрещает обращаться к полю 
всем кто не находится внутри того же самого пакета.

public же это модификатор уровеня доступа который говорит нам о том что к этому методу могут обращаться вообще все из любого места.То есть если есть какой то другой класс использующий объект Conditioner
Conditioner cond = new Conditioner();
то он сможет спокойно обращаться к полям в которых указан уровень доступа public , даже если он находиться в другом пакете.

Другим модификатором уровня доступа является уд private он наоборот сокращает уровень доступа до доступа к полю только внутри класса.Никто кроме того класса где находится метод или поле с уд private не сможет обращаться 
к этому методу или полю.

*Сначала указываются действия внутри тестов а затем выводится то что мы хотим получить то есть (геттеры).*
